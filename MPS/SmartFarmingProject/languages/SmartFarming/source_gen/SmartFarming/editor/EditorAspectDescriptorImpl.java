package SmartFarming.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Analytics_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CommunicationProtocol_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ControlSystem_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Crop_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Farm_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Farmer_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Gateway_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new IoTSystem_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new MonitoringSystem_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x6813e10dbb9625dfL), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x75c7c5f96ef4bb03L), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x6813e10dbb962600L), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x346b31548e5bd384L), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0xad19f946497d8c4L), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x346b31548e5bd36cL), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x75c7c5f96ef4bafbL), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x346b31548e5bd3a1L), MetaIdFactory.conceptId(0x5284d1bee3634c06L, 0xa2364161e9028c0dL, 0x6813e10dbb96262fL)).seal();
}

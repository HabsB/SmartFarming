package SmartFarming.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Crop;
  private ConceptPresentation props_Farm;
  private ConceptPresentation props_Farmer;
  private ConceptPresentation props_IoTSystem;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Crop:
        if (props_Crop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Crop represents the crop in smart farming system. ");
          cpb.presentationByName();
          props_Crop = cpb.create();
        }
        return props_Crop;
      case LanguageConceptSwitch.Farm:
        if (props_Farm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Farm represents a controlled-environment farm where it powered by IoT System. It is root of the system. ");
          cpb.presentationByName();
          props_Farm = cpb.create();
        }
        return props_Farm;
      case LanguageConceptSwitch.Farmer:
        if (props_Farmer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Farmer represents the person that operates smart farming system. ");
          cpb.presentationByName();
          props_Farmer = cpb.create();
        }
        return props_Farmer;
      case LanguageConceptSwitch.IoTSystem:
        if (props_IoTSystem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("IoT System represents the system powered by IoT that manage farm.");
          cpb.presentationByName();
          props_IoTSystem = cpb.create();
        }
        return props_IoTSystem;
    }
    return null;
  }
}
